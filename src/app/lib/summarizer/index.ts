/**
 * Thread Summarizer
 * 
 * This module handles summarizing thread content using DeepSeek AI.
 */

import fs from 'fs';
import path from 'path';
import { ensureDirectories, paths } from '../utils/paths';
import { Thread, ThreadSummary } from '../../types/interfaces';

// DeepSeek API key from environment variables
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;

/**
 * Check if we have a valid API key
 */
function validateApiKey(): boolean {
  if (!DEEPSEEK_API_KEY) {
    console.error('DEEPSEEK_API_KEY environment variable is not set');
    return false;
  }
  
  return true;
}

/**
 * Generate a summary for a thread using DeepSeek AI
 */
async function generateSummary(thread: Thread): Promise<ThreadSummary | null> {
  if (!validateApiKey()) {
    return null;
  }
  
  console.log(`Generating summary for thread ${thread.no}...`);
  
  try {
    // In a real implementation, we would call the DeepSeek API here
    // For now, this is just a placeholder
    
    // Create a mock summary
    const summary: ThreadSummary = {
      threadId: thread.no,
      title: thread.sub || `Thread #${thread.no}`,
      summary: 'This is a placeholder summary. The actual summary would be generated by DeepSeek AI.',
      postCount: thread.replies,
      imageCount: thread.images,
      created: thread.time,
      lastUpdated: Date.now() / 1000,
      countries: { 'US': 5, 'UK': 3, 'CA': 2 },
      keywords: ['politics', 'discussion', 'debate'],
      sentiment: 'neutral'
    };
    
    return summary;
  } catch (error) {
    console.error(`Error generating summary for thread ${thread.no}:`, error);
    return null;
  }
}

/**
 * Save a thread summary to disk
 */
function saveSummary(summary: ThreadSummary): void {
  const filePath = paths.summaryFile(summary.threadId.toString());
  
  try {
    // Write the summary to a temporary file first
    const tempPath = `${filePath}.tmp`;
    fs.writeFileSync(tempPath, JSON.stringify(summary, null, 2));
    
    // Rename the temporary file to the final path (atomic operation)
    fs.renameSync(tempPath, filePath);
    
    console.log(`Summary saved to ${filePath}`);
  } catch (error) {
    console.error(`Error saving summary to ${filePath}:`, error);
    throw error;
  }
}

/**
 * Get all thread files that need summarization
 */
function getThreadsToSummarize(): string[] {
  try {
    // Get all thread files
    const threadFiles = fs.readdirSync(paths.threadsDir)
      .filter(file => file.endsWith('.json'));
    
    // For each thread, check if we already have a summary
    return threadFiles.filter(file => {
      const threadId = path.basename(file, '.json');
      const summaryPath = paths.summaryFile(threadId);
      
      // If summary doesn't exist or is older than the thread file
      if (!fs.existsSync(summaryPath)) {
        return true;
      }
      
      // Compare modification times
      const threadStats = fs.statSync(path.join(paths.threadsDir, file));
      const summaryStats = fs.statSync(summaryPath);
      
      return threadStats.mtime > summaryStats.mtime;
    });
  } catch (error) {
    console.error('Error getting threads to summarize:', error);
    return [];
  }
}

/**
 * Main summarizer function
 */
async function summarize(): Promise<void> {
  console.log('Starting thread summarizer...');
  
  // Ensure our data directories exist
  ensureDirectories();
  
  // Get threads that need summarization
  const threadFiles = getThreadsToSummarize();
  console.log(`Found ${threadFiles.length} threads to summarize`);
  
  // Process each thread
  for (const file of threadFiles) {
    const threadId = path.basename(file, '.json');
    console.log(`Processing thread ${threadId}...`);
    
    try {
      // Read the thread file
      const threadPath = path.join(paths.threadsDir, file);
      const threadData = JSON.parse(fs.readFileSync(threadPath, 'utf-8')) as Thread;
      
      // Generate a summary
      const summary = await generateSummary(threadData);
      
      // Save the summary
      if (summary) {
        saveSummary(summary);
      }
    } catch (error) {
      console.error(`Error processing thread ${threadId}:`, error);
      // Continue with the next thread
    }
  }
  
  console.log('Summarization complete!');
}

// If this file is run directly (not imported)
if (require.main === module) {
  summarize()
    .then(() => console.log('Summarizer finished successfully'))
    .catch(error => {
      console.error('Summarizer failed:', error);
      process.exit(1);
    });
}

// Export for use in other modules
export { summarize }; 